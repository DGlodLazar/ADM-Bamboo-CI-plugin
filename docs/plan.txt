Listener interfaces to use:

BuildQueuedEvent
BuildCompletedEvent
ChainCompletedEvent
JobCompletedEvent
StageCompletedEvent
ServerStartedEvent - create connection to nga

Modules interesting:
Build Processor Module
Build Processor Server Module
Build Complete Action Module
Post-Build Completed Action Module
Post-Chain Action Module
Post-Job Action Module
Post-Stage Action Module
Pre-Build Action Module
Pre-Chain Action Module
Pre-Job Action Module
Pre-Stage Action Module

Web Section Module - Administration menu for configuring bamboo integration

public interface CIPluginServices {

   /**
    * Provides CI Server information
    *
    * @return ServerInfo object; MUST NOT return null
    */
   CIServerInfo getServerInfo();   - returns hard-coded CI identification

   /**
    * Provides Plugin's information
    *
    * @return PluginInfo object; MUST NOT return null
    */
   CIPluginInfo getPluginInfo();   - return hard-coded plugin identification

   /**
    * Provider the folder that the plugin is allowed to write to (logs, temporary stuff etc)
    *
    * @return File object of type Directory; if no available storage exists the implementation should return NULL
    */
   File getAllowedOctaneStorage(); - return NULL, no storage

   /**
    * Provides NGA Server configuration (managed by plugin implementation)
    *
    * @return NGAConfiguration object; if no configuration available the implementation should return NULL
    */
   OctaneConfiguration getOctaneConfiguration(); - octane configuration - is this username/pass/host or other configs? - stored in Bandana context probably

   /**
    * Provides CI Server proxy configuration (managed by plugin implementation)
    *
    * @param targetHost target host that the proxy, if available, should be relevant to
    * @return ProxyConfiguration object; if no configuration available the implementation should return NULL
    */
   CIProxyConfiguration getProxyConfiguration(String targetHost); - probably also stored in bandana context

   /**
    * Provides a list of Projects existing on this CI Server
    *
    * @param includeParameters
    * @return ProjectList object holding the list of the projects
    */
   CIJobsList getJobsList(boolean includeParameters); - list of projects/plans?
   /**
    * Provides Pipeline (structure) from the root CI Job
    *
    * @param rootCIJobId
    * @return
    */
   PipelineNode getPipeline(String rootCIJobId);

   /**
    * Executes the Pipeline, running the root job
    *
    * @param ciJobId
    * @param originalBody
    * @return
    */
   void runPipeline(String ciJobId, String originalBody);       //  [YG]: TODO: replace the body thing with parsed parameters/DTO

   /**
    * Provides Snapshot of the latest CI Build of the specified CI Job
    *
    * @param ciJobId
    * @param subTree
    * @return
    */
   SnapshotNode getSnapshotLatest(String ciJobId, boolean subTree);

   /**
    * Provides Snapshot of the specified CI Build of the specified CI Job
    *
    * @param ciJobId
    * @param buildCiId
    * @param subTree
    * @return
    */
   SnapshotNode getSnapshotByNumber(String ciJobId, String buildCiId, boolean subTree);

   /**
    * Retrieves aggregated latest builds info                  //  [YG]: TODO: this API should be removed, all the relevant data should be made available in the rest of APIs
    *
    * @param ciJobId
    * @param originalBody
    * @return
    */
   BuildHistory getHistoryPipeline(String ciJobId, String originalBody);

   /**
    * Retrieves tests result report for the specific build
    *
    * @param jobId
    * @param buildNumber
    * @return TestsResult data; NULL if no tests result available
    */
   TestsResult getTestsResult(String jobId, String buildNumber);
}

